---
import ThemeToggle from "./ThemeToggle.astro"

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: "Sobre m√≠",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "mailto:rafabasanta@hotmail.com",
  },
]
---

<header class="fixed top-4 z-50 w-full flex justify-center pointer-events-none">
  <nav
    id="header-nav"
    class="flex items-center gap-4 sm:gap-6 px-4 py-1 sm:px-6 sm:py-2 text-xs sm:text-sm font-medium
           rounded-full shadow-lg pointer-events-auto
           bg-white/80 dark:bg-[#1b1d2a]/80 border border-white/30 dark:border-white/10
           text-gray-800 dark:text-white/90 backdrop-blur-md transition-all duration-300"
  >
    {
      navItems.map((link) => (
        <a
          class="relative px-2 sm:px-3 py-1 transition hover:text-green-600 dark:hover:text-green-300 group"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
          <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-green-500 group-hover:w-full transition-all duration-300"></span>
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<style>
  nav a span {
    display: block;
    height: 2px;
    background: currentColor;
    transition: width 0.3s ease;
  }

  nav a:hover span {
    width: 100%;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-green-600", "dark:text-green-300")
              item.querySelector("span")?.classList.add("w-full")
              item.querySelector("span")?.classList.remove("w-0")
            } else {
              item.classList.remove("text-green-600", "dark:text-green-300")
              item.querySelector("span")?.classList.remove("w-full")
              item.querySelector("span")?.classList.add("w-0")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.4,
    })

    sections.forEach((section) => observer.observe(section))

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => observer.observe(section))
      }
    }
  })
</script>

